{
  "name": "bit-twiddle",
  "version": "0.0.1",
  "description": "Bit twiddling hacks for JavaScript",
  "main": "twiddle.js",
  "scripts": {
    "test": "tap ./test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/bit-twiddle.git"
  },
  "devDependencies": {
    "tap": "~0.3.3"
  },
  "keywords": [
    "bit",
    "twiddle",
    "hacks",
    "graphics",
    "octree",
    "quadtree"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "f0b4adc66dfb632473c57632e87d3a23f3dd2680",
  "readme": "bit-twiddle\n===========\n\nThis is a collection of miscellaneous bit twiddling hacks ported to JavaScript, mostly taken from here:\n\nhttp://graphics.stanford.edu/~seander/bithacks.html\n\nInstall\n=======\nVia npm:\n\n    npm install bit-twiddle\n\nFunctions\n=========\n\n`sign(v)`\n---------\nComputes the sign of the integer v.  Returns:\n* -1 if v < 0\n*  0 if v === 0\n* +1 if v > 0\n\n`abs(v)`\n--------\nReturns the absolute value of the integer v\n\n`min(x,y)`\n----------\nComputes the minimum of integers x and y\n\n`max(x,y)`\n----------\nComputes the maximum of integers x and y\n\n`isPow2(v)`\n-----------\nReturns `true` if v is a power of 2, otherwise false.\n\n`log2(v)`\n---------\nReturns an integer approximation of the log-base 2 of v\n\n`log10(v)`\n----------\nReturns log base 10 of v.\n\n`popCount(v)`\n-------------\nCounts the number of bits set in v\n\n`countTrailingZeros(v)`\n-----------------------\nCounts the number of trailing zeros.\n\n`nextPow2(v)`\n-------------\nRounds v to the next power of 2.\n\n`parity(v)`\n-----------\nComputes the parity of the bits in v.\n\n`reverse(v)`\n------------\nReverses the bits of v.\n\n`interleave2(x,y)`\n------------------\nInterleaves a pair of 16 bit integers.  Useful for fast quadtree style indexing.  (See wiki: http://en.wikipedia.org/wiki/Z-order_curve )\n\n`deinterleave2(v, n)`\n---------------------\nDeinterleaves the bits of v, returns the nth part.  If both x and y are 16 bit, then it is true that:\n\n    deinterleave2(interleave2(x,y), 0) === x\n    deinterleave2(interleave2(x,y), 1) === y\n    \n`interleave3(x,y,z)`\n--------------------\n\nInterleaves a triple of 10 bit integers.  Useful for fast octree indexing.\n\n`deinterleave3(v, n)`\n---------------------\nSame deal as `deinterleave2`, only for triples instead of pairs\n\n`nextCombination(x)`\n--------------------\nReturns next combination ordered colexicographically.\n\nAcknowledgements\n================\nCode is ported from Sean Eron Anderson's public domain bit twiddling hacks page.  http://graphics.stanford.edu/~seander/bithacks.html\nJavaScript implementation (c) 2013 Mikola Lysenko.  MIT License\n",
  "_id": "bit-twiddle@0.0.1",
  "_from": "bit-twiddle@"
}
